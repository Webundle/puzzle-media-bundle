<?php

namespace Puzzle\MediaBundle\Repository;

use Puzzle\AdminBundle\Repository\PuzzleRepository;

/**
 * PictureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PictureRepository extends PuzzleRepository
{
    /**
     * Find by name
     * @param string $name
     */
    public function findByName(string $name = null)
    {
        $builder = $this->createQueryBuilder('p');
        
        if ($name) {
            $builder->join('p.file', 'f')
                    ->where('f.displayName LIKE :name')
                    ->setParameter(':name', '%'.$name.'%');
        }
        
        return $builder->orderBy('p.createdAt', 'DESC')
                       ->getQuery()
                       ->getResult();
    }
    
	/**
	 * Find not in list
	 *
	 * @param string $list
	 * @return array
	 */
	public function findList()
	{
		return $this->_em
		->createQuery("SELECT p FROM ". $this->_entityName . " p")
		->getResult();
	}
	
	/**
	 * Find not in list
	 * 
	 * @param string $list
	 * @return array
	 */
	public function findInList(string $list)
	{
		return $this->_em
					->createQuery("SELECT p FROM ". $this->_entityName . " p WHERE :galleries MEMBER OF p.galleries")
					->setParameters(array(':galleries' => explode(',', $list)))
					->getResult();
	}
	
	/**
	 * Find by path
	 * mixed paths list or array of paths
	 */
	public function findByPaths($paths)
	{
		$paths = is_array($paths) ? implode(',', $paths) : $paths;
		
		return $this->_em
					->createQuery("SELECT p FROM ". $this->_entityName . " p WHERE p.path IN (:listPaths)")
					->setParameters(array(':listPaths' => $paths))
					->getResult();
	}
}
